import { useQuery } from "@tanstack/react-query"
import { Label } from "../interfaces/label"
import { githubApi } from "../../api/githubApi"
import { sleep } from "../../helpers/sleep"

const getLabels = async ():Promise<Label[]> => {

  await sleep(2) // Simulamos una peticion lenta
   
  const { data } = await githubApi.get<Label[]>('/labels', {
    // headers: {
    //   Authorization: null  // PARA REESCRIBIR ALGUN PARAMETRO DE LA CONFIGURACION GLOBAL
    // }
  })
  // console.log(data)
  return data
}

export const useLabels = () => {

  const labelQuery = useQuery(
    ['labels'],
     getLabels,
     // {// Generated by https://quicktype.io
     //   refetchOnWindowFocus: false, 
     // }
    {
      staleTime: 1000 * 60 * 60 * 24,  // 1 day
      placeholderData: [
        {
          id: 725156255,
          node_id: "MDU6TGFiZWw3MjUxNTYyNTU=",
          url: "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
          name: "good first issue (taken)",
          color: "b60205",
          default: false,
          description: null
        },
        {
          id: 717031390,
          node_id: "MDU6TGFiZWw3MTcwMzEzOTA=",
          url: "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
          name: "good first issue",
          color: "6ce26a",
          default: true,
          description: null 
        }
      ],
      // initialData: []
      // initialData no hace refecth si la data que tenemos en el cache esta fresh
      // hasta que no pase el timepo marcado en el staleTime y ya esta stated y hara el refetch
      // placeholderData hace refetch siempre pero muestra los datos que le pasemos antes de hacerlo
    }
  )

  return { // Por si acaso luego es mas facil retornar mas cosas refactoriranzo
    labelQuery
  }
}